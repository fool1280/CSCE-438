// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: snsFollowSync.proto

#include "snsFollowSync.pb.h"
#include "snsFollowSync.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace snsFollowSync {

static const char* SNSFollowSync_method_names[] = {
  "/snsFollowSync.SNSFollowSync/SyncUsers",
  "/snsFollowSync.SNSFollowSync/SyncRelations",
  "/snsFollowSync.SNSFollowSync/SyncTimeline",
};

std::unique_ptr< SNSFollowSync::Stub> SNSFollowSync::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SNSFollowSync::Stub> stub(new SNSFollowSync::Stub(channel, options));
  return stub;
}

SNSFollowSync::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SyncUsers_(SNSFollowSync_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SyncRelations_(SNSFollowSync_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SyncTimeline_(SNSFollowSync_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SNSFollowSync::Stub::SyncUsers(::grpc::ClientContext* context, const ::snsFollowSync::Users& request, ::snsFollowSync::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::snsFollowSync::Users, ::snsFollowSync::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SyncUsers_, context, request, response);
}

void SNSFollowSync::Stub::async::SyncUsers(::grpc::ClientContext* context, const ::snsFollowSync::Users* request, ::snsFollowSync::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::snsFollowSync::Users, ::snsFollowSync::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SyncUsers_, context, request, response, std::move(f));
}

void SNSFollowSync::Stub::async::SyncUsers(::grpc::ClientContext* context, const ::snsFollowSync::Users* request, ::snsFollowSync::Reply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SyncUsers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::snsFollowSync::Reply>* SNSFollowSync::Stub::PrepareAsyncSyncUsersRaw(::grpc::ClientContext* context, const ::snsFollowSync::Users& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::snsFollowSync::Reply, ::snsFollowSync::Users, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SyncUsers_, context, request);
}

::grpc::ClientAsyncResponseReader< ::snsFollowSync::Reply>* SNSFollowSync::Stub::AsyncSyncUsersRaw(::grpc::ClientContext* context, const ::snsFollowSync::Users& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSyncUsersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SNSFollowSync::Stub::SyncRelations(::grpc::ClientContext* context, const ::snsFollowSync::Relation& request, ::snsFollowSync::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::snsFollowSync::Relation, ::snsFollowSync::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SyncRelations_, context, request, response);
}

void SNSFollowSync::Stub::async::SyncRelations(::grpc::ClientContext* context, const ::snsFollowSync::Relation* request, ::snsFollowSync::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::snsFollowSync::Relation, ::snsFollowSync::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SyncRelations_, context, request, response, std::move(f));
}

void SNSFollowSync::Stub::async::SyncRelations(::grpc::ClientContext* context, const ::snsFollowSync::Relation* request, ::snsFollowSync::Reply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SyncRelations_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::snsFollowSync::Reply>* SNSFollowSync::Stub::PrepareAsyncSyncRelationsRaw(::grpc::ClientContext* context, const ::snsFollowSync::Relation& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::snsFollowSync::Reply, ::snsFollowSync::Relation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SyncRelations_, context, request);
}

::grpc::ClientAsyncResponseReader< ::snsFollowSync::Reply>* SNSFollowSync::Stub::AsyncSyncRelationsRaw(::grpc::ClientContext* context, const ::snsFollowSync::Relation& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSyncRelationsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SNSFollowSync::Stub::SyncTimeline(::grpc::ClientContext* context, const ::snsFollowSync::Post& request, ::snsFollowSync::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::snsFollowSync::Post, ::snsFollowSync::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SyncTimeline_, context, request, response);
}

void SNSFollowSync::Stub::async::SyncTimeline(::grpc::ClientContext* context, const ::snsFollowSync::Post* request, ::snsFollowSync::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::snsFollowSync::Post, ::snsFollowSync::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SyncTimeline_, context, request, response, std::move(f));
}

void SNSFollowSync::Stub::async::SyncTimeline(::grpc::ClientContext* context, const ::snsFollowSync::Post* request, ::snsFollowSync::Reply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SyncTimeline_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::snsFollowSync::Reply>* SNSFollowSync::Stub::PrepareAsyncSyncTimelineRaw(::grpc::ClientContext* context, const ::snsFollowSync::Post& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::snsFollowSync::Reply, ::snsFollowSync::Post, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SyncTimeline_, context, request);
}

::grpc::ClientAsyncResponseReader< ::snsFollowSync::Reply>* SNSFollowSync::Stub::AsyncSyncTimelineRaw(::grpc::ClientContext* context, const ::snsFollowSync::Post& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSyncTimelineRaw(context, request, cq);
  result->StartCall();
  return result;
}

SNSFollowSync::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSFollowSync_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSFollowSync::Service, ::snsFollowSync::Users, ::snsFollowSync::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SNSFollowSync::Service* service,
             ::grpc::ServerContext* ctx,
             const ::snsFollowSync::Users* req,
             ::snsFollowSync::Reply* resp) {
               return service->SyncUsers(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSFollowSync_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSFollowSync::Service, ::snsFollowSync::Relation, ::snsFollowSync::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SNSFollowSync::Service* service,
             ::grpc::ServerContext* ctx,
             const ::snsFollowSync::Relation* req,
             ::snsFollowSync::Reply* resp) {
               return service->SyncRelations(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSFollowSync_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSFollowSync::Service, ::snsFollowSync::Post, ::snsFollowSync::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SNSFollowSync::Service* service,
             ::grpc::ServerContext* ctx,
             const ::snsFollowSync::Post* req,
             ::snsFollowSync::Reply* resp) {
               return service->SyncTimeline(ctx, req, resp);
             }, this)));
}

SNSFollowSync::Service::~Service() {
}

::grpc::Status SNSFollowSync::Service::SyncUsers(::grpc::ServerContext* context, const ::snsFollowSync::Users* request, ::snsFollowSync::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNSFollowSync::Service::SyncRelations(::grpc::ServerContext* context, const ::snsFollowSync::Relation* request, ::snsFollowSync::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNSFollowSync::Service::SyncTimeline(::grpc::ServerContext* context, const ::snsFollowSync::Post* request, ::snsFollowSync::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace snsFollowSync

