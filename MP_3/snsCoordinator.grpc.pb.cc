// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: snsCoordinator.proto

#include "snsCoordinator.pb.h"
#include "snsCoordinator.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace snsCoordinator {

static const char* SNSCoordinator_method_names[] = {
  "/snsCoordinator.SNSCoordinator/HandleHeartBeats",
  "/snsCoordinator.SNSCoordinator/GetFollowSyncsForUsers",
  "/snsCoordinator.SNSCoordinator/GetServer",
  "/snsCoordinator.SNSCoordinator/GetSlave",
};

std::unique_ptr< SNSCoordinator::Stub> SNSCoordinator::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SNSCoordinator::Stub> stub(new SNSCoordinator::Stub(channel, options));
  return stub;
}

SNSCoordinator::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_HandleHeartBeats_(SNSCoordinator_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_GetFollowSyncsForUsers_(SNSCoordinator_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetServer_(SNSCoordinator_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSlave_(SNSCoordinator_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReaderWriter< ::snsCoordinator::Heartbeat, ::snsCoordinator::Heartbeat>* SNSCoordinator::Stub::HandleHeartBeatsRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::snsCoordinator::Heartbeat, ::snsCoordinator::Heartbeat>::Create(channel_.get(), rpcmethod_HandleHeartBeats_, context);
}

void SNSCoordinator::Stub::async::HandleHeartBeats(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::snsCoordinator::Heartbeat,::snsCoordinator::Heartbeat>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::snsCoordinator::Heartbeat,::snsCoordinator::Heartbeat>::Create(stub_->channel_.get(), stub_->rpcmethod_HandleHeartBeats_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::snsCoordinator::Heartbeat, ::snsCoordinator::Heartbeat>* SNSCoordinator::Stub::AsyncHandleHeartBeatsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::snsCoordinator::Heartbeat, ::snsCoordinator::Heartbeat>::Create(channel_.get(), cq, rpcmethod_HandleHeartBeats_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::snsCoordinator::Heartbeat, ::snsCoordinator::Heartbeat>* SNSCoordinator::Stub::PrepareAsyncHandleHeartBeatsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::snsCoordinator::Heartbeat, ::snsCoordinator::Heartbeat>::Create(channel_.get(), cq, rpcmethod_HandleHeartBeats_, context, false, nullptr);
}

::grpc::Status SNSCoordinator::Stub::GetFollowSyncsForUsers(::grpc::ClientContext* context, const ::snsCoordinator::Users& request, ::snsCoordinator::FollowSyncs* response) {
  return ::grpc::internal::BlockingUnaryCall< ::snsCoordinator::Users, ::snsCoordinator::FollowSyncs, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetFollowSyncsForUsers_, context, request, response);
}

void SNSCoordinator::Stub::async::GetFollowSyncsForUsers(::grpc::ClientContext* context, const ::snsCoordinator::Users* request, ::snsCoordinator::FollowSyncs* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::snsCoordinator::Users, ::snsCoordinator::FollowSyncs, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFollowSyncsForUsers_, context, request, response, std::move(f));
}

void SNSCoordinator::Stub::async::GetFollowSyncsForUsers(::grpc::ClientContext* context, const ::snsCoordinator::Users* request, ::snsCoordinator::FollowSyncs* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFollowSyncsForUsers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::snsCoordinator::FollowSyncs>* SNSCoordinator::Stub::PrepareAsyncGetFollowSyncsForUsersRaw(::grpc::ClientContext* context, const ::snsCoordinator::Users& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::snsCoordinator::FollowSyncs, ::snsCoordinator::Users, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetFollowSyncsForUsers_, context, request);
}

::grpc::ClientAsyncResponseReader< ::snsCoordinator::FollowSyncs>* SNSCoordinator::Stub::AsyncGetFollowSyncsForUsersRaw(::grpc::ClientContext* context, const ::snsCoordinator::Users& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetFollowSyncsForUsersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SNSCoordinator::Stub::GetServer(::grpc::ClientContext* context, const ::snsCoordinator::User& request, ::snsCoordinator::ServerInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::snsCoordinator::User, ::snsCoordinator::ServerInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetServer_, context, request, response);
}

void SNSCoordinator::Stub::async::GetServer(::grpc::ClientContext* context, const ::snsCoordinator::User* request, ::snsCoordinator::ServerInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::snsCoordinator::User, ::snsCoordinator::ServerInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServer_, context, request, response, std::move(f));
}

void SNSCoordinator::Stub::async::GetServer(::grpc::ClientContext* context, const ::snsCoordinator::User* request, ::snsCoordinator::ServerInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::snsCoordinator::ServerInfo>* SNSCoordinator::Stub::PrepareAsyncGetServerRaw(::grpc::ClientContext* context, const ::snsCoordinator::User& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::snsCoordinator::ServerInfo, ::snsCoordinator::User, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetServer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::snsCoordinator::ServerInfo>* SNSCoordinator::Stub::AsyncGetServerRaw(::grpc::ClientContext* context, const ::snsCoordinator::User& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetServerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SNSCoordinator::Stub::GetSlave(::grpc::ClientContext* context, const ::snsCoordinator::ClusterId& request, ::snsCoordinator::ServerInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::snsCoordinator::ClusterId, ::snsCoordinator::ServerInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSlave_, context, request, response);
}

void SNSCoordinator::Stub::async::GetSlave(::grpc::ClientContext* context, const ::snsCoordinator::ClusterId* request, ::snsCoordinator::ServerInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::snsCoordinator::ClusterId, ::snsCoordinator::ServerInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSlave_, context, request, response, std::move(f));
}

void SNSCoordinator::Stub::async::GetSlave(::grpc::ClientContext* context, const ::snsCoordinator::ClusterId* request, ::snsCoordinator::ServerInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSlave_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::snsCoordinator::ServerInfo>* SNSCoordinator::Stub::PrepareAsyncGetSlaveRaw(::grpc::ClientContext* context, const ::snsCoordinator::ClusterId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::snsCoordinator::ServerInfo, ::snsCoordinator::ClusterId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSlave_, context, request);
}

::grpc::ClientAsyncResponseReader< ::snsCoordinator::ServerInfo>* SNSCoordinator::Stub::AsyncGetSlaveRaw(::grpc::ClientContext* context, const ::snsCoordinator::ClusterId& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSlaveRaw(context, request, cq);
  result->StartCall();
  return result;
}

SNSCoordinator::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSCoordinator_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< SNSCoordinator::Service, ::snsCoordinator::Heartbeat, ::snsCoordinator::Heartbeat>(
          [](SNSCoordinator::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::snsCoordinator::Heartbeat,
             ::snsCoordinator::Heartbeat>* stream) {
               return service->HandleHeartBeats(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSCoordinator_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSCoordinator::Service, ::snsCoordinator::Users, ::snsCoordinator::FollowSyncs, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SNSCoordinator::Service* service,
             ::grpc::ServerContext* ctx,
             const ::snsCoordinator::Users* req,
             ::snsCoordinator::FollowSyncs* resp) {
               return service->GetFollowSyncsForUsers(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSCoordinator_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSCoordinator::Service, ::snsCoordinator::User, ::snsCoordinator::ServerInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SNSCoordinator::Service* service,
             ::grpc::ServerContext* ctx,
             const ::snsCoordinator::User* req,
             ::snsCoordinator::ServerInfo* resp) {
               return service->GetServer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSCoordinator_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSCoordinator::Service, ::snsCoordinator::ClusterId, ::snsCoordinator::ServerInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SNSCoordinator::Service* service,
             ::grpc::ServerContext* ctx,
             const ::snsCoordinator::ClusterId* req,
             ::snsCoordinator::ServerInfo* resp) {
               return service->GetSlave(ctx, req, resp);
             }, this)));
}

SNSCoordinator::Service::~Service() {
}

::grpc::Status SNSCoordinator::Service::HandleHeartBeats(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::snsCoordinator::Heartbeat, ::snsCoordinator::Heartbeat>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNSCoordinator::Service::GetFollowSyncsForUsers(::grpc::ServerContext* context, const ::snsCoordinator::Users* request, ::snsCoordinator::FollowSyncs* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNSCoordinator::Service::GetServer(::grpc::ServerContext* context, const ::snsCoordinator::User* request, ::snsCoordinator::ServerInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNSCoordinator::Service::GetSlave(::grpc::ServerContext* context, const ::snsCoordinator::ClusterId* request, ::snsCoordinator::ServerInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace snsCoordinator

