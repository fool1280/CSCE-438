// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: snsCoordinator.proto
#ifndef GRPC_snsCoordinator_2eproto__INCLUDED
#define GRPC_snsCoordinator_2eproto__INCLUDED

#include "snsCoordinator.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace snsCoordinator {

class SNSCoordinator final {
 public:
  static constexpr char const* service_full_name() {
    return "snsCoordinator.SNSCoordinator";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::snsCoordinator::Heartbeat, ::snsCoordinator::Heartbeat>> HandleHeartBeats(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::snsCoordinator::Heartbeat, ::snsCoordinator::Heartbeat>>(HandleHeartBeatsRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::snsCoordinator::Heartbeat, ::snsCoordinator::Heartbeat>> AsyncHandleHeartBeats(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::snsCoordinator::Heartbeat, ::snsCoordinator::Heartbeat>>(AsyncHandleHeartBeatsRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::snsCoordinator::Heartbeat, ::snsCoordinator::Heartbeat>> PrepareAsyncHandleHeartBeats(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::snsCoordinator::Heartbeat, ::snsCoordinator::Heartbeat>>(PrepareAsyncHandleHeartBeatsRaw(context, cq));
    }
    virtual ::grpc::Status GetFollowSyncsForUsers(::grpc::ClientContext* context, const ::snsCoordinator::Users& request, ::snsCoordinator::FollowSyncs* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::snsCoordinator::FollowSyncs>> AsyncGetFollowSyncsForUsers(::grpc::ClientContext* context, const ::snsCoordinator::Users& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::snsCoordinator::FollowSyncs>>(AsyncGetFollowSyncsForUsersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::snsCoordinator::FollowSyncs>> PrepareAsyncGetFollowSyncsForUsers(::grpc::ClientContext* context, const ::snsCoordinator::Users& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::snsCoordinator::FollowSyncs>>(PrepareAsyncGetFollowSyncsForUsersRaw(context, request, cq));
    }
    virtual ::grpc::Status GetServer(::grpc::ClientContext* context, const ::snsCoordinator::User& request, ::snsCoordinator::ServerInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::snsCoordinator::ServerInfo>> AsyncGetServer(::grpc::ClientContext* context, const ::snsCoordinator::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::snsCoordinator::ServerInfo>>(AsyncGetServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::snsCoordinator::ServerInfo>> PrepareAsyncGetServer(::grpc::ClientContext* context, const ::snsCoordinator::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::snsCoordinator::ServerInfo>>(PrepareAsyncGetServerRaw(context, request, cq));
    }
    virtual ::grpc::Status GetSlave(::grpc::ClientContext* context, const ::snsCoordinator::ClusterId& request, ::snsCoordinator::ServerInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::snsCoordinator::ServerInfo>> AsyncGetSlave(::grpc::ClientContext* context, const ::snsCoordinator::ClusterId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::snsCoordinator::ServerInfo>>(AsyncGetSlaveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::snsCoordinator::ServerInfo>> PrepareAsyncGetSlave(::grpc::ClientContext* context, const ::snsCoordinator::ClusterId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::snsCoordinator::ServerInfo>>(PrepareAsyncGetSlaveRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void HandleHeartBeats(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::snsCoordinator::Heartbeat,::snsCoordinator::Heartbeat>* reactor) = 0;
      virtual void GetFollowSyncsForUsers(::grpc::ClientContext* context, const ::snsCoordinator::Users* request, ::snsCoordinator::FollowSyncs* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetFollowSyncsForUsers(::grpc::ClientContext* context, const ::snsCoordinator::Users* request, ::snsCoordinator::FollowSyncs* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetServer(::grpc::ClientContext* context, const ::snsCoordinator::User* request, ::snsCoordinator::ServerInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetServer(::grpc::ClientContext* context, const ::snsCoordinator::User* request, ::snsCoordinator::ServerInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetSlave(::grpc::ClientContext* context, const ::snsCoordinator::ClusterId* request, ::snsCoordinator::ServerInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSlave(::grpc::ClientContext* context, const ::snsCoordinator::ClusterId* request, ::snsCoordinator::ServerInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderWriterInterface< ::snsCoordinator::Heartbeat, ::snsCoordinator::Heartbeat>* HandleHeartBeatsRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::snsCoordinator::Heartbeat, ::snsCoordinator::Heartbeat>* AsyncHandleHeartBeatsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::snsCoordinator::Heartbeat, ::snsCoordinator::Heartbeat>* PrepareAsyncHandleHeartBeatsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::snsCoordinator::FollowSyncs>* AsyncGetFollowSyncsForUsersRaw(::grpc::ClientContext* context, const ::snsCoordinator::Users& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::snsCoordinator::FollowSyncs>* PrepareAsyncGetFollowSyncsForUsersRaw(::grpc::ClientContext* context, const ::snsCoordinator::Users& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::snsCoordinator::ServerInfo>* AsyncGetServerRaw(::grpc::ClientContext* context, const ::snsCoordinator::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::snsCoordinator::ServerInfo>* PrepareAsyncGetServerRaw(::grpc::ClientContext* context, const ::snsCoordinator::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::snsCoordinator::ServerInfo>* AsyncGetSlaveRaw(::grpc::ClientContext* context, const ::snsCoordinator::ClusterId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::snsCoordinator::ServerInfo>* PrepareAsyncGetSlaveRaw(::grpc::ClientContext* context, const ::snsCoordinator::ClusterId& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReaderWriter< ::snsCoordinator::Heartbeat, ::snsCoordinator::Heartbeat>> HandleHeartBeats(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::snsCoordinator::Heartbeat, ::snsCoordinator::Heartbeat>>(HandleHeartBeatsRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::snsCoordinator::Heartbeat, ::snsCoordinator::Heartbeat>> AsyncHandleHeartBeats(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::snsCoordinator::Heartbeat, ::snsCoordinator::Heartbeat>>(AsyncHandleHeartBeatsRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::snsCoordinator::Heartbeat, ::snsCoordinator::Heartbeat>> PrepareAsyncHandleHeartBeats(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::snsCoordinator::Heartbeat, ::snsCoordinator::Heartbeat>>(PrepareAsyncHandleHeartBeatsRaw(context, cq));
    }
    ::grpc::Status GetFollowSyncsForUsers(::grpc::ClientContext* context, const ::snsCoordinator::Users& request, ::snsCoordinator::FollowSyncs* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::snsCoordinator::FollowSyncs>> AsyncGetFollowSyncsForUsers(::grpc::ClientContext* context, const ::snsCoordinator::Users& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::snsCoordinator::FollowSyncs>>(AsyncGetFollowSyncsForUsersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::snsCoordinator::FollowSyncs>> PrepareAsyncGetFollowSyncsForUsers(::grpc::ClientContext* context, const ::snsCoordinator::Users& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::snsCoordinator::FollowSyncs>>(PrepareAsyncGetFollowSyncsForUsersRaw(context, request, cq));
    }
    ::grpc::Status GetServer(::grpc::ClientContext* context, const ::snsCoordinator::User& request, ::snsCoordinator::ServerInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::snsCoordinator::ServerInfo>> AsyncGetServer(::grpc::ClientContext* context, const ::snsCoordinator::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::snsCoordinator::ServerInfo>>(AsyncGetServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::snsCoordinator::ServerInfo>> PrepareAsyncGetServer(::grpc::ClientContext* context, const ::snsCoordinator::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::snsCoordinator::ServerInfo>>(PrepareAsyncGetServerRaw(context, request, cq));
    }
    ::grpc::Status GetSlave(::grpc::ClientContext* context, const ::snsCoordinator::ClusterId& request, ::snsCoordinator::ServerInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::snsCoordinator::ServerInfo>> AsyncGetSlave(::grpc::ClientContext* context, const ::snsCoordinator::ClusterId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::snsCoordinator::ServerInfo>>(AsyncGetSlaveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::snsCoordinator::ServerInfo>> PrepareAsyncGetSlave(::grpc::ClientContext* context, const ::snsCoordinator::ClusterId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::snsCoordinator::ServerInfo>>(PrepareAsyncGetSlaveRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void HandleHeartBeats(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::snsCoordinator::Heartbeat,::snsCoordinator::Heartbeat>* reactor) override;
      void GetFollowSyncsForUsers(::grpc::ClientContext* context, const ::snsCoordinator::Users* request, ::snsCoordinator::FollowSyncs* response, std::function<void(::grpc::Status)>) override;
      void GetFollowSyncsForUsers(::grpc::ClientContext* context, const ::snsCoordinator::Users* request, ::snsCoordinator::FollowSyncs* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetServer(::grpc::ClientContext* context, const ::snsCoordinator::User* request, ::snsCoordinator::ServerInfo* response, std::function<void(::grpc::Status)>) override;
      void GetServer(::grpc::ClientContext* context, const ::snsCoordinator::User* request, ::snsCoordinator::ServerInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetSlave(::grpc::ClientContext* context, const ::snsCoordinator::ClusterId* request, ::snsCoordinator::ServerInfo* response, std::function<void(::grpc::Status)>) override;
      void GetSlave(::grpc::ClientContext* context, const ::snsCoordinator::ClusterId* request, ::snsCoordinator::ServerInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReaderWriter< ::snsCoordinator::Heartbeat, ::snsCoordinator::Heartbeat>* HandleHeartBeatsRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::snsCoordinator::Heartbeat, ::snsCoordinator::Heartbeat>* AsyncHandleHeartBeatsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::snsCoordinator::Heartbeat, ::snsCoordinator::Heartbeat>* PrepareAsyncHandleHeartBeatsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::snsCoordinator::FollowSyncs>* AsyncGetFollowSyncsForUsersRaw(::grpc::ClientContext* context, const ::snsCoordinator::Users& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::snsCoordinator::FollowSyncs>* PrepareAsyncGetFollowSyncsForUsersRaw(::grpc::ClientContext* context, const ::snsCoordinator::Users& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::snsCoordinator::ServerInfo>* AsyncGetServerRaw(::grpc::ClientContext* context, const ::snsCoordinator::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::snsCoordinator::ServerInfo>* PrepareAsyncGetServerRaw(::grpc::ClientContext* context, const ::snsCoordinator::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::snsCoordinator::ServerInfo>* AsyncGetSlaveRaw(::grpc::ClientContext* context, const ::snsCoordinator::ClusterId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::snsCoordinator::ServerInfo>* PrepareAsyncGetSlaveRaw(::grpc::ClientContext* context, const ::snsCoordinator::ClusterId& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_HandleHeartBeats_;
    const ::grpc::internal::RpcMethod rpcmethod_GetFollowSyncsForUsers_;
    const ::grpc::internal::RpcMethod rpcmethod_GetServer_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSlave_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status HandleHeartBeats(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::snsCoordinator::Heartbeat, ::snsCoordinator::Heartbeat>* stream);
    virtual ::grpc::Status GetFollowSyncsForUsers(::grpc::ServerContext* context, const ::snsCoordinator::Users* request, ::snsCoordinator::FollowSyncs* response);
    virtual ::grpc::Status GetServer(::grpc::ServerContext* context, const ::snsCoordinator::User* request, ::snsCoordinator::ServerInfo* response);
    virtual ::grpc::Status GetSlave(::grpc::ServerContext* context, const ::snsCoordinator::ClusterId* request, ::snsCoordinator::ServerInfo* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_HandleHeartBeats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HandleHeartBeats() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_HandleHeartBeats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleHeartBeats(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::snsCoordinator::Heartbeat, ::snsCoordinator::Heartbeat>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandleHeartBeats(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::snsCoordinator::Heartbeat, ::snsCoordinator::Heartbeat>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFollowSyncsForUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetFollowSyncsForUsers() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetFollowSyncsForUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFollowSyncsForUsers(::grpc::ServerContext* /*context*/, const ::snsCoordinator::Users* /*request*/, ::snsCoordinator::FollowSyncs* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFollowSyncsForUsers(::grpc::ServerContext* context, ::snsCoordinator::Users* request, ::grpc::ServerAsyncResponseWriter< ::snsCoordinator::FollowSyncs>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetServer() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServer(::grpc::ServerContext* /*context*/, const ::snsCoordinator::User* /*request*/, ::snsCoordinator::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServer(::grpc::ServerContext* context, ::snsCoordinator::User* request, ::grpc::ServerAsyncResponseWriter< ::snsCoordinator::ServerInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSlave : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSlave() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetSlave() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSlave(::grpc::ServerContext* /*context*/, const ::snsCoordinator::ClusterId* /*request*/, ::snsCoordinator::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSlave(::grpc::ServerContext* context, ::snsCoordinator::ClusterId* request, ::grpc::ServerAsyncResponseWriter< ::snsCoordinator::ServerInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_HandleHeartBeats<WithAsyncMethod_GetFollowSyncsForUsers<WithAsyncMethod_GetServer<WithAsyncMethod_GetSlave<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_HandleHeartBeats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_HandleHeartBeats() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::snsCoordinator::Heartbeat, ::snsCoordinator::Heartbeat>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->HandleHeartBeats(context); }));
    }
    ~WithCallbackMethod_HandleHeartBeats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleHeartBeats(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::snsCoordinator::Heartbeat, ::snsCoordinator::Heartbeat>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::snsCoordinator::Heartbeat, ::snsCoordinator::Heartbeat>* HandleHeartBeats(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetFollowSyncsForUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetFollowSyncsForUsers() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::snsCoordinator::Users, ::snsCoordinator::FollowSyncs>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::snsCoordinator::Users* request, ::snsCoordinator::FollowSyncs* response) { return this->GetFollowSyncsForUsers(context, request, response); }));}
    void SetMessageAllocatorFor_GetFollowSyncsForUsers(
        ::grpc::MessageAllocator< ::snsCoordinator::Users, ::snsCoordinator::FollowSyncs>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::snsCoordinator::Users, ::snsCoordinator::FollowSyncs>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetFollowSyncsForUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFollowSyncsForUsers(::grpc::ServerContext* /*context*/, const ::snsCoordinator::Users* /*request*/, ::snsCoordinator::FollowSyncs* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFollowSyncsForUsers(
      ::grpc::CallbackServerContext* /*context*/, const ::snsCoordinator::Users* /*request*/, ::snsCoordinator::FollowSyncs* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetServer() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::snsCoordinator::User, ::snsCoordinator::ServerInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::snsCoordinator::User* request, ::snsCoordinator::ServerInfo* response) { return this->GetServer(context, request, response); }));}
    void SetMessageAllocatorFor_GetServer(
        ::grpc::MessageAllocator< ::snsCoordinator::User, ::snsCoordinator::ServerInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::snsCoordinator::User, ::snsCoordinator::ServerInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServer(::grpc::ServerContext* /*context*/, const ::snsCoordinator::User* /*request*/, ::snsCoordinator::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetServer(
      ::grpc::CallbackServerContext* /*context*/, const ::snsCoordinator::User* /*request*/, ::snsCoordinator::ServerInfo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetSlave : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetSlave() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::snsCoordinator::ClusterId, ::snsCoordinator::ServerInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::snsCoordinator::ClusterId* request, ::snsCoordinator::ServerInfo* response) { return this->GetSlave(context, request, response); }));}
    void SetMessageAllocatorFor_GetSlave(
        ::grpc::MessageAllocator< ::snsCoordinator::ClusterId, ::snsCoordinator::ServerInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::snsCoordinator::ClusterId, ::snsCoordinator::ServerInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetSlave() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSlave(::grpc::ServerContext* /*context*/, const ::snsCoordinator::ClusterId* /*request*/, ::snsCoordinator::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSlave(
      ::grpc::CallbackServerContext* /*context*/, const ::snsCoordinator::ClusterId* /*request*/, ::snsCoordinator::ServerInfo* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_HandleHeartBeats<WithCallbackMethod_GetFollowSyncsForUsers<WithCallbackMethod_GetServer<WithCallbackMethod_GetSlave<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_HandleHeartBeats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HandleHeartBeats() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_HandleHeartBeats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleHeartBeats(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::snsCoordinator::Heartbeat, ::snsCoordinator::Heartbeat>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetFollowSyncsForUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetFollowSyncsForUsers() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetFollowSyncsForUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFollowSyncsForUsers(::grpc::ServerContext* /*context*/, const ::snsCoordinator::Users* /*request*/, ::snsCoordinator::FollowSyncs* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetServer() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServer(::grpc::ServerContext* /*context*/, const ::snsCoordinator::User* /*request*/, ::snsCoordinator::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSlave : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSlave() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetSlave() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSlave(::grpc::ServerContext* /*context*/, const ::snsCoordinator::ClusterId* /*request*/, ::snsCoordinator::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_HandleHeartBeats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HandleHeartBeats() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_HandleHeartBeats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleHeartBeats(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::snsCoordinator::Heartbeat, ::snsCoordinator::Heartbeat>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandleHeartBeats(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetFollowSyncsForUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetFollowSyncsForUsers() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetFollowSyncsForUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFollowSyncsForUsers(::grpc::ServerContext* /*context*/, const ::snsCoordinator::Users* /*request*/, ::snsCoordinator::FollowSyncs* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFollowSyncsForUsers(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetServer() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServer(::grpc::ServerContext* /*context*/, const ::snsCoordinator::User* /*request*/, ::snsCoordinator::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSlave : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSlave() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetSlave() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSlave(::grpc::ServerContext* /*context*/, const ::snsCoordinator::ClusterId* /*request*/, ::snsCoordinator::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSlave(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_HandleHeartBeats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_HandleHeartBeats() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->HandleHeartBeats(context); }));
    }
    ~WithRawCallbackMethod_HandleHeartBeats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleHeartBeats(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::snsCoordinator::Heartbeat, ::snsCoordinator::Heartbeat>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* HandleHeartBeats(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetFollowSyncsForUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetFollowSyncsForUsers() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetFollowSyncsForUsers(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetFollowSyncsForUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFollowSyncsForUsers(::grpc::ServerContext* /*context*/, const ::snsCoordinator::Users* /*request*/, ::snsCoordinator::FollowSyncs* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFollowSyncsForUsers(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetServer() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetServer(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServer(::grpc::ServerContext* /*context*/, const ::snsCoordinator::User* /*request*/, ::snsCoordinator::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetServer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetSlave : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetSlave() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSlave(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetSlave() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSlave(::grpc::ServerContext* /*context*/, const ::snsCoordinator::ClusterId* /*request*/, ::snsCoordinator::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSlave(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetFollowSyncsForUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetFollowSyncsForUsers() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::snsCoordinator::Users, ::snsCoordinator::FollowSyncs>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::snsCoordinator::Users, ::snsCoordinator::FollowSyncs>* streamer) {
                       return this->StreamedGetFollowSyncsForUsers(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetFollowSyncsForUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFollowSyncsForUsers(::grpc::ServerContext* /*context*/, const ::snsCoordinator::Users* /*request*/, ::snsCoordinator::FollowSyncs* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetFollowSyncsForUsers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::snsCoordinator::Users,::snsCoordinator::FollowSyncs>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetServer() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::snsCoordinator::User, ::snsCoordinator::ServerInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::snsCoordinator::User, ::snsCoordinator::ServerInfo>* streamer) {
                       return this->StreamedGetServer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetServer(::grpc::ServerContext* /*context*/, const ::snsCoordinator::User* /*request*/, ::snsCoordinator::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::snsCoordinator::User,::snsCoordinator::ServerInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSlave : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSlave() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::snsCoordinator::ClusterId, ::snsCoordinator::ServerInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::snsCoordinator::ClusterId, ::snsCoordinator::ServerInfo>* streamer) {
                       return this->StreamedGetSlave(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSlave() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSlave(::grpc::ServerContext* /*context*/, const ::snsCoordinator::ClusterId* /*request*/, ::snsCoordinator::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSlave(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::snsCoordinator::ClusterId,::snsCoordinator::ServerInfo>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetFollowSyncsForUsers<WithStreamedUnaryMethod_GetServer<WithStreamedUnaryMethod_GetSlave<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetFollowSyncsForUsers<WithStreamedUnaryMethod_GetServer<WithStreamedUnaryMethod_GetSlave<Service > > > StreamedService;
};

}  // namespace snsCoordinator


#endif  // GRPC_snsCoordinator_2eproto__INCLUDED
